local mode = 4 -- 1 = Maze, 2 = Death Race, 3 = Growganoth Right, 4 = Growganoth Left
local running = true
local Delay_World = 5000
local Ticket_ID = 1898
local Carnival_World = "CARNIVAL"
local Storage_World = "FBAAI|BASO12"

-- Variabel baru untuk sistem drop
local Target_Drop_Pos = 12
local Price_Action = {
    3010,
    1940,
    1936,
    1942,
    2216,
    2980,
    12290,
    10064
}

-- Variabel untuk status setelah finish
local finishedMaze = false
local spentTicket = false
local finishedDeathRace = false
local finishedGrowganothRight = false
local finishedGrowganothLeft = false

patchMemoryByName("Mod fly")
function enter(x, y)
    local pkt = {}
    pkt.type = 7
    pkt.punchx = x
    pkt.punchy = y        
    pkt.x = getLocal().pos.x        
    pkt.y = getLocal().pos.y       
    pkt.value = 18
    sendPacketRaw(false, pkt)
end

-- Fungsi cek inventory
function Inventory(id)
    for _, x in pairs(getInventory()) do
        if x.id == id then
            return x.amount
        end
    end
    return 0
end

-- Fungsi warp
function Warp(worldName)
    sleep(100)
    sendPacket(3, "action|join_request\nname|" .. worldName)
    sleep(Delay_World)
end

-- Fungsi collect item dalam range 3 tile
function Collect(x, y)
    local playerX = math.floor(getLocal().pos.x / 32)
    local playerY = math.floor(getLocal().pos.y / 32)
    
    if math.abs(playerX - x) <= 3 and math.abs(playerY - y) <= 3 then
        requestCollect(x, y, Ticket_ID)
        return true
    end
    return false
end

-- Fungsi take ticket
function Take_Item()
    for _, obj in pairs(getWorldObject()) do
        if obj.id == Ticket_ID then
            local targetX = math.floor(obj.pos.x / 32)
            local targetY = math.floor(obj.pos.y / 32)
            
            findPath(targetX, targetY)
            sleep(200)
            
            if Collect(targetX, targetY) then
                sleep(1000)
                return true
            end
        end
    end
    return false
end

-- Fungsi drop item
function DropItem(id, count)
    sendPacket(2, "action|drop\n|itemID|" .. id)
    sendPacket(2, "action|dialog_return\ndialog_name|drop_item\nitemID|" .. id .. "|\ncount|" .. count)
    sleep(500)
end

-- Fungsi drop semua item price action
function Drop()
    for _, itemID in ipairs(Price_Action) do
        local itemCount = Inventory(itemID)
        
        while itemCount > 0 do
            local tiles = getTile()
            local foundPosition = false
            
            for _, tile in ipairs(tiles) do
                if tile.fg == Target_Drop_Pos then
                    foundPosition = true
                    findPath(tile.pos.x, tile.pos.y)
                    sleep(1000)
                    
                    -- Drop item
                    DropItem(itemID, itemCount)
                    sleep(1000)
                    
                    -- Update jumlah item setelah drop
                    itemCount = Inventory(itemID)
                    break
                end
            end
            
            if not foundPosition then
                break
            end
            
            sleep(1000)
        end
    end
    
    return true
end

-- Fungsi cek apakah ada item price action di inventory
function hasPriceActionItems()
    for _, itemID in ipairs(Price_Action) do
        if Inventory(itemID) > 0 then
            return true
        end
    end
    return false
end

-- Fungsi refill ticket yang diperbaiki
function Refill_Ticket()
    Warp(Storage_World)
    sleep(2000)
    
    -- Cek dan drop item price action jika ada
    if hasPriceActionItems() then
        Drop()
        sleep(2000)
    end
    
    for i = 1, 10 do
        if Take_Item() then
            sleep(2000)
            Warp(Carnival_World)
            sleep(2000)
            
            -- Tunggu dan periksa apakah sudah sampai di world CARNIVAL
            local waitAttempts = 0
            local maxWaitAttempts = 10
            
            while waitAttempts < maxWaitAttempts do
                local world = getWorld()
                if world and world.name and string.find(world.name, "CARNIVAL") then
                    -- Sudah sampai di CARNIVAL, jalankan logika normal sekali
                    executeNormalMode()
                    return true
                end
                
                sleep(1000)
                waitAttempts = waitAttempts + 1
            end
            
            return true
        end
        sleep(1000)
    end
    
    return false
end

-- Hook untuk menangani event setelah menyelesaikan
function OnVariantHook(varlist, netID)
    if varlist and varlist[0] == "OnTalkBubble" and varlist[2] then
        local message = tostring(varlist[2])
        
        if string.find(message, "You finished") then
            if mode == 1 then
                finishedMaze = true
                spentTicket = false
            elseif mode == 2 then
                finishedDeathRace = true
            elseif mode == 3 then
                finishedGrowganothRight = true
            elseif mode == 4 then
                finishedGrowganothLeft = true
            end
        end
    end
    
    if varlist and varlist[0] == "OnConsoleMessage" and varlist[1] then
        local message = tostring(varlist[1])
        
        if string.find(message, "You spent") then
            spentTicket = true
            if mode == 1 then
                finishedMaze = false
            elseif mode == 2 then
                finishedDeathRace = false
            elseif mode == 3 then
                finishedGrowganothRight = false
            elseif mode == 4 then
                finishedGrowganothLeft = false
            end
        end
    end
    return false
end

-- ===== FUNGSI LOGIKA NORMAL =====
function executeNormalMode()
    local x = math.floor(getLocal().pos.x / 32)
    local y = math.floor(getLocal().pos.y / 32)
    
    if mode == 1 then
        -- Mode Maze
        if x == 26 and y == 25 then
            enter(26, 25)
            sleep(500)
        else
            findPath(26, 25)
            sleep(200)
        end
    elseif mode == 2 then
        -- Mode Death Race
        if x == 33 and y == 13 then
            enter(33, 13)
            sleep(500)
        else
            findPath(33, 13)
            sleep(200)
        end
    elseif mode == 3 then
        -- Mode Growganoth Right
        if x == 92 and y == 37 then
            enter(92, 37)
            sleep(500)
        else
            findPath(92, 37)
            sleep(200)
        end
    elseif mode == 4 then
        -- Mode Growganoth Left
        if x == 7 and y == 37 then
            enter(7, 37)
            sleep(500)
        else
            findPath(7, 37)
            sleep(200)
        end
    end
end

-- ===== FUNGSI HANDLE FINISH =====
function handleFinish()
    local x = math.floor(getLocal().pos.x / 32)
    local y = math.floor(getLocal().pos.y / 32)
    
    if mode == 1 and finishedMaze then
        while x ~= 26 or y ~= 25 do
            findPath(26, 25)
            sleep(200)
            x = math.floor(getLocal().pos.x / 32)
            y = math.floor(getLocal().pos.y / 32)
        end
        
        enter(26, 25)
        sleep(500)
        finishedMaze = false
        return true
    elseif mode == 2 and finishedDeathRace then
        while x ~= 33 or y ~= 13 do
            findPath(33, 13)
            sleep(200)
            x = math.floor(getLocal().pos.x / 32)
            y = math.floor(getLocal().pos.y / 32)
        end
        
        enter(33, 13)
        sleep(500)
        finishedDeathRace = false
        return true
    elseif mode == 3 and finishedGrowganothRight then
        while x ~= 92 or y ~= 37 do
            findPath(92, 37)
            sleep(200)
            x = math.floor(getLocal().pos.x / 32)
            y = math.floor(getLocal().pos.y / 32)
        end
        
        enter(92, 37)
        sleep(500)
        finishedGrowganothRight = false
        return true
    elseif mode == 4 and finishedGrowganothLeft then
        while x ~= 7 or y ~= 37 do
            findPath(7, 37)
            sleep(200)
            x = math.floor(getLocal().pos.x / 32)
            y = math.floor(getLocal().pos.y / 32)
        end
        
        enter(7, 37)
        sleep(500)
        finishedGrowganothLeft = false
        return true
    end
    
    return false
end

-- ===== FUNGSI HANDLE SPENT TICKET =====
function handleSpentTicket()
    local x = math.floor(getLocal().pos.x / 32)
    local y = math.floor(getLocal().pos.y / 32)
    
    if spentTicket then
        if mode == 1 then
            while x ~= 24 or y ~= 24 do
                findPath(24, 24)
                sleep(200)
                x = math.floor(getLocal().pos.x / 32)
                y = math.floor(getLocal().pos.y / 32)
            end
        elseif mode == 2 then
            while x ~= 31 or y ~= 11 do
                findPath(31, 11)
                sleep(200)
                x = math.floor(getLocal().pos.x / 32)
                y = math.floor(getLocal().pos.y / 32)
            end
            
            requestTileChange(31, 11, 18)
            sleep(500)
        elseif mode == 3 then
            while x ~= 96 or y ~= 23 do
                findPath(96, 23)
                sleep(200)
                x = math.floor(getLocal().pos.x / 32)
                y = math.floor(getLocal().pos.y / 32)
            end
            
            requestTileChange(96, 23, 18)
            sleep(500)
        elseif mode == 4 then
            while x ~= 3 or y ~= 23 do
                findPath(3, 23)
                sleep(200)
                x = math.floor(getLocal().pos.x / 32)
                y = math.floor(getLocal().pos.y / 32)
            end
            
            requestTileChange(3, 23, 18)
            sleep(500)
        end
        
        spentTicket = false
        return true
    end
    
    return false
end

-- ===== MAIN EXECUTION =====
function executeMode()
    if Inventory(Ticket_ID) <= 0 then
        Refill_Ticket()
        return
    end
    
    -- Prioritaskan penanganan event finish dan spent ticket
    if handleFinish() then
        return
    end
    
    if handleSpentTicket() then
        return
    end
    
    -- Jika tidak ada event, jalankan logika normal
    executeNormalMode()
end

-- ===== MAIN LOOP =====
AddHook("onvarlist", "FinishHandler", OnVariantHook)

-- Jalankan logika normal sekali di awal
executeNormalMode()

-- Loop utama untuk menangani event dan refill ticket
while running do
    executeMode()
    sleep(1000)
end

RemoveHook("FinishHandler")
