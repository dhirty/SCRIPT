local mode = 2 -- 1 = Maze, 2 = Death Race, 3 = Growganoth Right, 4 = Growganoth Left
local Delay_World = 5000
local Storage_World = "FBAAI|BASO12"
local running = false
local Ticket_ID = 1898
local Carnival_World = "CARNIVAL"

-- Variabel untuk status setelah finish
local finishedMaze = false
local spentTicket = false
local finishedDeathRace = false
local finishedGrowganothRight = false
local finishedGrowganothLeft = false

-- Hook untuk menangani perintah chat
function OnTextPacket(type, packet)
    if packet:find("action|input\n|text|") then
        local text = packet:match("|text|(.+)")
        
        if text == "/run" then
            if not running then
                running = true
                logToConsole("Bot started! Mode: " .. mode)
                runThread(mainLoop, "MainLoop")
            else
                logToConsole("Bot is already running!")
            end
            return true
        elseif text == "/stop" then
            if running then
                running = false
                killThread("MainLoop")
                logToConsole("Bot stopped!")
            else
                logToConsole("Bot is not running!")
            end
            return true
        elseif text:find("^/set ") then
            -- Handle /set commands
            local command = text:sub(6) -- Remove "/set "
            
            if command == "1" or command == "2" or command == "3" or command == "4" then
                -- Set mode
                local newMode = tonumber(command)
                mode = newMode
                logToConsole("Mode set to: " .. mode)
                return true
            elseif command:find("delay ") then
                -- Set delay
                local delayValue = command:match("delay (%d+)")
                if delayValue then
                    local newDelay = tonumber(delayValue)
                    if newDelay and newDelay > 0 then
                        Delay_World = newDelay
                        logToConsole("Delay set to: " .. Delay_World .. "ms")
                    else
                        logToConsole("Invalid delay value!")
                    end
                else
                    logToConsole("Usage: /set delay <milliseconds>")
                end
                return true
            elseif command:find("storage ") then
                -- Set storage world
                local storageValue = command:match("storage (.+)")
                if storageValue then
                    Storage_World = storageValue
                    logToConsole("Storage world set to: " .. Storage_World)
                else
                    logToConsole("Usage: /set storage <world_name>")
                end
                return true
            else
                -- Show help
                logToConsole("Available commands: /set 1|2|3|4, /set delay <ms>, /set storage <world>")
                return true
            end
        elseif text == "/status" then
            -- Show current status
            logToConsole("Current: Mode=" .. mode .. ", Delay=" .. Delay_World .. "ms, Storage=" .. Storage_World .. ", Running=" .. tostring(running))
            return true
        end
    end
    return false
end

-- Hook untuk menangani semua variant list
function OnVariantHook(varlist, netID)
    -- Handle finish events
    if varlist[0] == "OnTalkBubble" and varlist[2] then
        local message = tostring(varlist[2])
        
        if string.find(message, "You finished") then
            if mode == 1 then
                finishedMaze = true
                spentTicket = false
                logToConsole("Maze finished! Returning to start...")
            elseif mode == 2 then
                finishedDeathRace = true
                spentTicket = false
                logToConsole("Death Race finished! Returning to start...")
            elseif mode == 3 then
                finishedGrowganothRight = true
                spentTicket = false
                logToConsole("Growganoth Right finished! Returning to start...")
            elseif mode == 4 then
                finishedGrowganothLeft = true
                spentTicket = false
                logToConsole("Growganoth Left finished! Returning to start...")
            end
        end
    end
    
    if varlist[0] == "OnConsoleMessage" and varlist[1] then
        local message = tostring(varlist[1])
        
        if string.find(message, "You spent") then
            spentTicket = true
            if mode == 1 then
                finishedMaze = false
            elseif mode == 2 then
                finishedDeathRace = false
            elseif mode == 3 then
                finishedGrowganothRight = false
            elseif mode == 4 then
                finishedGrowganothLeft = false
            end
            logToConsole("Ticket spent! Going to target...")
        end
    end
    
    return false
end

function enter(x, y)
    local pkt = {}
    pkt.type = 7
    pkt.punchx = x
    pkt.punchy = y        
    pkt.x = getLocal().pos.x        
    pkt.y = getLocal().pos.y       
    pkt.value = 18
    sendPacketRaw(false, pkt)
end

-- Fungsi cek inventory
function Inventory(id)
    for _, x in pairs(getInventory()) do
        if x.id == id then
            return x.amount
        end
    end
    return 0
end

-- Fungsi warp
function Warp(worldName)
    sleep(100)
    sendPacket(3, "action|join_request\nname|" .. worldName)
    sleep(Delay_World)
end

-- Fungsi collect item dalam range 3 tile
function Collect(x, y)
    local playerX = math.floor(getLocal().pos.x / 32)
    local playerY = math.floor(getLocal().pos.y / 32)
    
    if math.abs(playerX - x) <= 3 and math.abs(playerY - y) <= 3 then
        requestCollect(x, y, Ticket_ID)
        return true
    end
    return false
end

-- Fungsi take ticket
function Take_Item()
    for _, obj in pairs(getWorldObject()) do
        if obj.id == Ticket_ID then
            local targetX = math.floor(obj.pos.x / 32)
            local targetY = math.floor(obj.pos.y / 32)
            
            findPath(targetX, targetY)
            sleep(200)
            
            if Collect(targetX, targetY) then
                sleep(1000)
                return true
            end
        end
    end
    return false
end

-- Fungsi refill ticket
function Refill_Ticket()
    logToConsole("Ticket empty! Refilling from storage...")
    Warp(Storage_World)
    sleep(2000)
    
    for i = 1, 10 do
        if Take_Item() then
            sleep(2000)
            Warp(Carnival_World)
            sleep(2000)
            
            -- Tunggu dan periksa apakah sudah sampai di world CARNIVAL
            local waitAttempts = 0
            local maxWaitAttempts = 10
            
            while waitAttempts < maxWaitAttempts do
                local world = getWorld()
                if world and world.name and string.find(world.name, "CARNIVAL") then
                    logToConsole("Successfully returned to CARNIVAL world")
                    executeNormalMode()
                    return true
                end
                
                sleep(1000)
                waitAttempts = waitAttempts + 1
            end
            
            return true
        end
        sleep(1000)
    end
    
    logToConsole("Failed to collect ticket after 10 attempts!")
    return false
end

-- ===== FUNGSI LOGIKA NORMAL =====
function executeNormalMode()
    local x = math.floor(getLocal().pos.x / 32)
    local y = math.floor(getLocal().pos.y / 32)
    
    if mode == 1 then
        if x == 26 and y == 25 then
            enter(26, 25)
            sleep(500)
        else
            findPath(26, 25)
            sleep(200)
        end
    elseif mode == 2 then
        if x == 33 and y == 13 then
            enter(33, 13)
            sleep(500)
        else
            findPath(33, 13)
            sleep(200)
        end
    elseif mode == 3 then
        if x == 92 and y == 37 then
            enter(92, 37)
            sleep(500)
        else
            findPath(92, 37)
            sleep(200)
        end
    elseif mode == 4 then
        if x == 7 and y == 37 then
            enter(7, 37)
            sleep(500)
        else
            findPath(7, 37)
            sleep(200)
        end
    end
end

-- ===== FUNGSI HANDLE FINISH =====
function handleFinish()
    local x = math.floor(getLocal().pos.x / 32)
    local y = math.floor(getLocal().pos.y / 32)
    
    if mode == 1 and finishedMaze then
        while x ~= 26 or y ~= 25 do
            findPath(26, 25)
            sleep(200)
            x = math.floor(getLocal().pos.x / 32)
            y = math.floor(getLocal().pos.y / 32)
        end
        
        enter(26, 25)
        sleep(500)
        finishedMaze = false
        return true
    elseif mode == 2 and finishedDeathRace then
        while x ~= 33 or y ~= 13 do
            findPath(33, 13)
            sleep(200)
            x = math.floor(getLocal().pos.x / 32)
            y = math.floor(getLocal().pos.y / 32)
        end
        
        enter(33, 13)
        sleep(500)
        finishedDeathRace = false
        return true
    elseif mode == 3 and finishedGrowganothRight then
        while x ~= 92 or y ~= 37 do
            findPath(92, 37)
            sleep(200)
            x = math.floor(getLocal().pos.x / 32)
            y = math.floor(getLocal().pos.y / 32)
        end
        
        enter(92, 37)
        sleep(500)
        finishedGrowganothRight = false
        return true
    elseif mode == 4 and finishedGrowganothLeft then
        while x ~= 7 or y ~= 37 do
            findPath(7, 37)
            sleep(200)
            x = math.floor(getLocal().pos.x / 32)
            y = math.floor(getLocal().pos.y / 32)
        end
        
        enter(7, 37)
        sleep(500)
        finishedGrowganothLeft = false
        return true
    end
    
    return false
end

-- ===== FUNGSI HANDLE SPENT TICKET =====
function handleSpentTicket()
    local x = math.floor(getLocal().pos.x / 32)
    local y = math.floor(getLocal().pos.y / 32)
    
    if spentTicket then
        if mode == 1 then
            while x ~= 24 or y ~= 24 do
                findPath(24, 24)
                sleep(200)
                x = math.floor(getLocal().pos.x / 32)
                y = math.floor(getLocal().pos.y / 32)
            end
        elseif mode == 2 then
            while x ~= 31 or y ~= 11 do
                findPath(31, 11)
                sleep(200)
                x = math.floor(getLocal().pos.x / 32)
                y = math.floor(getLocal().pos.y / 32)
            end
            
            requestTileChange(31, 11, 18)
            sleep(500)
        elseif mode == 3 then
            while x ~= 96 or y ~= 23 do
                findPath(96, 23)
                sleep(200)
                x = math.floor(getLocal().pos.x / 32)
                y = math.floor(getLocal().pos.y / 32)
            end
            
            requestTileChange(96, 23, 18)
            sleep(500)
        elseif mode == 4 then
            while x ~= 3 or y ~= 23 do
                findPath(3, 23)
                sleep(200)
                x = math.floor(getLocal().pos.x / 32)
                y = math.floor(getLocal().pos.y / 32)
            end
            
            requestTileChange(3, 23, 18)
            sleep(500)
        end
        
        spentTicket = false
        return true
    end
    
    return false
end

-- ===== MAIN EXECUTION =====
function executeMode()
    if Inventory(Ticket_ID) <= 0 then
        Refill_Ticket()
        return
    end
    
    if handleFinish() then
        return
    end
    
    if handleSpentTicket() then
        return
    end
    
    executeNormalMode()
end

-- ===== LOOP UTAMA =====
function mainLoop()
    executeNormalMode()
    
    while running do
        executeMode()
        sleep(1000)
    end
end

-- ===== INISIALISASI HOOK =====
AddHook("ontextpacket", "CommandHandler", OnTextPacket)
AddHook("onvarlist", "EventHandler", OnVariantHook)

-- Pesan awal saat script dimuat
logToConsole("Bot loaded! Commands: /run, /stop, /set 1|2|3|4, /set delay <ms>, /set storage <world>, /status")
